# Cline/Codex AI Rules

## 프로젝트 컨텍스트
이 프로젝트는 여러 AI 에디터(Claude Code, Codex, Cursor, Windsurf)를 사용하는 멀티 에디터 개발 환경입니다.

## 필수 참조 문서
작업 시작 전 반드시 다음 문서들을 읽고 준수하세요:

1. **🎯 실행 계획 (최우선)**: `.ai/PLAN.md` - 현재 진행 상황 및 다음 작업
2. **메인 개발 가이드**: `.ai/DEVELOPMENT.md`
3. **아키텍처**: `.ai/ARCHITECTURE.md`
4. **코딩 규칙**: `.ai/CODING_RULES.md`
5. **Supabase 가이드**: `.ai/SUPABASE_GUIDE.md`

## 핵심 규칙

### 1. 일관성 유지
- 모든 변경사항은 `.ai/DEVELOPMENT.md`의 원칙을 따릅니다
- 기존 코드 스타일과 패턴을 유지합니다
- 다른 AI 에디터와의 협업을 고려합니다

### 2. 코드 품질
- `.ai/CODING_RULES.md`의 모든 규칙을 엄격히 준수
- Python 타입 힌트 필수 사용
- 에러 처리 필수 포함 (통일된 에러 처리 패턴 사용)
- 테스트 코드 작성 필수 (pytest 기반)

### 3. 문서화
- 복잡한 로직에는 Docstring 주석 추가 (Python 스타일)
- 중요한 결정사항은 `.ai/DEVELOPMENT.md`에 기록
- 커밋 메시지에 `[Codex]` 또는 `[Cline]` 태그 추가

### 4. 아키텍처 준수
- `.ai/ARCHITECTURE.md`의 레이어 구조 준수
- 디자인 패턴 일관성 유지
- 파일/폴더 구조 규칙 준수

### 5. Git 워크플로우
- 작업 전 최신 코드 pull
- 커밋 메시지 형식: `<type>: <subject> [Codex]`
- 푸시 전 충돌 확인

## 네이밍 규칙 (Python)
- 모듈/패키지: snake_case (`user_service.py`, `services/`)
- 함수/변수: snake_case (`get_user_data`)
- 상수: UPPER_SNAKE_CASE (`API_BASE_URL`)
- 클래스/타입: PascalCase (`UserService`, `UserData`)
- Private: _underscore prefix (`_internal_helper`)

## 코드 스타일 (Python)
- 들여쓰기: 스페이스 4칸 (PEP 8)
- 문자열: 작은따옴표 또는 큰따옴표 일관성 있게
- f-string 사용 권장: `f"Hello {name}"`
- 줄 길이: 최대 88자 (Black 포맷터 기준)

## 금지사항
- `.ai/` 디렉토리 내 문서 임의 수정 금지 (중요 변경은 팀 합의 필요)
- 코딩 규칙 위반 금지
- 테스트 없는 코드 커밋 금지
- 타입 `Any` 남용 금지 (명시적 타입 힌트 사용)
- 에러 처리 없는 코드 금지

## 작업 흐름

### 작업 시작 시
1. **`git pull`** - 최신 코드 받기
2. **`.ai/PLAN.md` 확인** - 현재 진행 상황 및 다음 작업 파악
3. **체크박스 찾기** - `[ ]` 항목에서 다음 작업 선택

### 작업 중
4. `.ai/DEVELOPMENT.md` 및 관련 문서 검토
5. 코드 작성 (코딩 규칙 준수)
6. 테스트 작성 및 실행

### 작업 완료 시 (⚠️ TODO 하나 완료할 때마다 필수 실행)
7. **`.ai/PLAN.md` 업데이트** - 완료한 항목 `[x]` 체크
8. **"다음 작업자 메모"** 업데이트 - 현재 상태, 다음 할 일, 주의사항 기록
9. **문서 업데이트 (필수 확인)**:
   - **새 공급사 추가** → `.ai/PLAN.md`에 공급사 정보 기록
   - **아키텍처 변경** → `.ai/ARCHITECTURE.md` 업데이트
   - **새 기능 추가** → `README.md` 사용 예시 추가
   - **API/설정 변경** → `.ai/SUPABASE_GUIDE.md` 또는 `.ai/MCP_GUIDE.md` 업데이트
   - **주요 결정사항** → `.ai/DEVELOPMENT.md` 변경 이력에 기록
   - **해당 없음** → 다음 단계로 진행
10. **즉시 커밋** (`[Codex]` 또는 `[Cline]` 태그 포함) - TODO 하나 완료 시마다
    ```bash
    git add .
    git commit -m "<type>: <작업 내용 요약> [Codex]

    🤖 Generated with [Claude Code](https://claude.com/claude-code)

    Co-Authored-By: Claude <noreply@anthropic.com>"
    ```
11. **푸시 (선택)** - 주요 작업 완료 시 또는 작업 종료 시
    ```bash
    git push
    ```

### ⚠️ 중요: TODO 단위 작업 원칙
- **하나의 TODO = 하나의 커밋**: 각 TODO 완료 시마다 즉시 커밋
- **작은 단위로 자주 커밋**: 큰 작업을 여러 TODO로 나누어 진행
- **롤백 가능성 확보**: 각 TODO가 독립적으로 동작하도록 구성
- **다른 에디터와 충돌 최소화**: 자주 커밋하고 주기적으로 푸시

## 에디터 간 협업
- 다른 에디터가 작성한 코드 존중
- 대규모 리팩토링은 사전 논의
- 충돌 발생 시 `.ai/DEVELOPMENT.md` 기준으로 해결

## Claude/Codex 특화 기능 활용
- 대화형 개발 프로세스 활용
- 상세한 코드 설명 및 리뷰
- 문제 해결 시 단계별 접근

## 업데이트
이 규칙은 `.ai/DEVELOPMENT.md`를 기반으로 합니다.
규칙 변경 시 해당 문서를 먼저 업데이트하세요.

---
Last Updated: 2025-10-06 [Cline] - Python 중심으로 업데이트
